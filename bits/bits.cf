# scene data
data = [
	[0, 100, 100, 0]
 	[0, 250, 100, 1]
	[1, 150, 110, 0]]

# drag and drop helpers
drag = ->
  d3.select(this).attr
    x: d3.event.x
    y: d3.event.y

bitOrigin = ->
  bit = d3.select(this)
  x: bit.attr('x'), y: bit.attr('y')

onDrag = d3.behavior.drag()
  .origin bitOrigin
  .on 'dragend', ->
    e = d3.event.sourceEvent
    if e.movementX or e.movementY then e.preventDefault()
  .on "drag", drag

bitColor = (d)-> if d[0] then '#333' else '#eee'
bitShape = (d)-> if d[3] then 1 else 16

resize_svg = ->
  html = document.querySelector('html')
  h1   = document.querySelector('h1')
  d3.select('svg').style
    border: 'none'
    height: html.clientHeight - h1.clientHeight
    width : html.clientWidth

# main program
resize_svg()

bits = d3.select('#stage').selectAll('rect').data(data)
bits.enter().append 'rect'
	.attr
    filter: 'url(#shadow)'
    width: 32, height: 32
    fill: bitColor
    rx: bitShape, ry: bitShape
    x: (d)->d[1]
    y: (d)->d[2]
  .on 'click', (d)->
    if not d3.event.defaultPrevented
      d[0] = 1-d[0]
      d3.select(this).transition().duration(100).attr fill: bitColor
  .on 'dblclick', (d)->
    d[3] = 1-d[3]
    d3.select(this).transition()
	  	.ease 'linear'
    	.duration 300
    	.attr rx: bitShape, ry: bitShape
  .call onDrag

